<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:vw="http://inosoft.com/visiwin7">
	<!-- Resource dictionary entries should be defined here. -->
	<Style x:Key="NRB_AppBar" TargetType="{x:Type vw:NavigationRadioButton}">
		<Setter Property="BorderThickness" Value="1,1,0,1"/>
		<Setter Property="CornerRadius" Value="4,0,0,4"/>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontFamily" Value="Segoe UI"/>
		<Setter Property="FontWeight" Value="Normal"/>
		<Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="{DynamicResource FP_Gray_Gradient}"/>
		<Setter Property="BlinkBrush" Value="{DynamicResource ButtonBlinkBrush}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource ButtonPressedBorderBrush}"/>
		<Setter Property="Content" Value="{Binding Text, RelativeSource={RelativeSource Self}}"/>
		<Setter Property="SymbolVerticalAlignment" Value="Center"/>
		<Setter Property="SymbolHorizontalAlignment" Value="Left"/>
		<Setter Property="SymbolMargin" Value="0,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="Padding" Value="50,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type vw:NavigationRadioButton}">
					<Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding CornerRadius}">
						<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
							<vw:SymbolPresenter x:Name="SymbolPresenter" HorizontalAlignment="{TemplateBinding SymbolHorizontalAlignment}" Margin="{TemplateBinding SymbolMargin}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" SymbolResourceKey="{TemplateBinding SymbolResourceKey}" Symbol="{TemplateBinding Symbol}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding SymbolVerticalAlignment}"/>
							<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.3"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource FP_Red}"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" Value="{DynamicResource FP_Red}"/>
						</Trigger>
						<DataTrigger Binding="{Binding Symbol, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="SymbolPresenter" Value="Collapsed"/>
						</DataTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="BlinkMode" Value="BlinkBrush"/>
								<Condition Property="BlinkState" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="BackgroundBorder" Value="{Binding BlinkBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="BlinkMode" Value="Visibility"/>
								<Condition Property="BlinkState" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="BackgroundBorder" Value="Hidden"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>